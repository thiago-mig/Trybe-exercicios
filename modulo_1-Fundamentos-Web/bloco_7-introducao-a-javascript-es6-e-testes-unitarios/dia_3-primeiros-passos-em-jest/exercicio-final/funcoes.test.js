const {sum, myRemove, myFizzBuzz,} = require('./funcoes.js');

//ðŸš€ 1 - A funÃ§Ã£o sum(a, b) retorna a soma do parÃ¢metro a com o b

describe('FunÃ§Ã£o que realiza a soma de 2 parÃ¢metros:', () => {
  describe('Verifica se estÃ¡ realizando a soma de valores corretos:', () => {
    it('testa se o retorno de 4 + 5 Ã© 9', () => {
        expect(sum(4, 5)).toBe(9);
    });
    it('testa se o retorno de 0 + 0 Ã© 0', () => {
        expect(sum(0, 0)).toBe(0);
    });
  });
  describe('Verifica se lanÃ§a exceÃ§Ã£o ao inserir valores nÃ£o numÃ©ricos:', () => {
    it('Testa se Ã© lanÃ§ado erro ao lanÃ§ar valores em formato incorreto como parÃ¢metro.', () => {
        expect(() => sum(4, '5')).toThrow(Error);
    });

    it("Testa se a mensagem de erro Ã© 'parameters must be numbers'. ", () => {
        expect(() => sum(4, '5')).toThrow('parameters must be numbers');
    });
  });

});

//ðŸš€ 2 - A funÃ§Ã£o myRemove(arr, item) recebe um array arr e retorna uma cÃ³pia desse array sem o elemento item caso ele exista no array

describe('2 - A funÃ§Ã£o myRemove(arr, item) recebe um array arr e retorna uma cÃ³pia desse array sem o elemento item caso ele exista no array', () => {
    it('Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado', () => {
        expect(myRemove([1, 2, 3, 4], 3)).toEqual([1, 2, 4]);
    });
    it('Verifique se a chamada myRemove([1, 2, 3, 4], 3) nÃ£o retorna o array [1, 2, 3, 4]', () => {
        expect(myRemove([1, 2, 3, 4], 3)).not.toEqual([1, 2, 3, 4]);
    });
    it('Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado', () => {
        expect(myRemove([1, 2, 3, 4], 5)).toEqual([1, 2, 3, 4]);
    });

});

describe('ðŸš€ 3 - A funÃ§Ã£o myFizzBuzz(num) recebe um nÃºmero num e retorna "fizzbuzz" se o nÃºmero for divisÃ­vel por 3 e 5, retorna "fizz" se for divisÃ­vel apenas por 3, retorna "buzz" se divisÃ­vel apenas por 5, retorna o prÃ³prio nÃºmero caso nÃ£o seja divisÃ­vel por 3 ou 5 e retorna false caso num nÃ£o seja um nÃºmero', () => {
    it('FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e 5 e verifique se o retorno Ã© o esperado', () =>{
        expect(myFizzBuzz(15)).toBe('fizzbuzz');
    });
    it('FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e verifique se o retorno Ã© o esperado', () => {
        expect(myFizzBuzz(3)).toBe('fizz');
    });
    it('FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 5 e verifique se o retorno Ã© o esperado', () => {
        expect(myFizzBuzz(5)).toBe('buzz');
    });
    it('FaÃ§a uma chamada com um nÃºmero que nÃ£o Ã© divisÃ­vel por 3 ou 5 e verifique se o retorno Ã© o esperado', () =>{
        expect(myFizzBuzz(4)).toBe(4);
    });
    it('FaÃ§a uma chamada com um parÃ¢metro que nÃ£o Ã© um nÃºmero e verifique se o retorno Ã© o esperado', () => {
        expect(myFizzBuzz('5')).toBe(false);
    });

});